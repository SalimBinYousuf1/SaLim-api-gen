// Generated by Salim-api-gen
// API: {{ api_info['title'] }} (v{{ api_info['version'] }})
// Description: {{ api_info['description'] }}

class {{ api_info['title']|replace(' ', '') }}Client {
  constructor(baseUrl, apiKey) {
    this.baseUrl = baseUrl.replace(/\/$/, '');
    this.apiKey = apiKey;
  }

  async _request(method, endpoint, params = {}, data = null) {
    const url = new URL(`${this.baseUrl}${endpoint}`);
    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));

    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.apiKey}`
    };

    const config = {
      method,
      headers,
      body: data ? JSON.stringify(data) : undefined,
    };

    try {
      const response = await fetch(url, config);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }

  {% for path, methods in endpoints.items() %}
  {% for method, details in methods.items() %}
  async {{ details['operationId']|default(method|lower + path|replace('/', '_')|capitalize) }}({% for param in details['parameters'] %}{{ param['name'] }}{% if not loop.last %}, {% endif %}{% endfor %}{% if details['requestBody'] %}{% if details['parameters'] %}, {% endif %}data{% endif %}) {
    const params = {
      {% for param in details['parameters'] if param['in'] == 'query' %}
      {{ param['name'] }},
      {% endfor %}
    };
    {% if details['requestBody'] %}
    // TODO: Implement request body validation
    {% endif %}
    return this._request('{{ method|upper }}', '{{ path }}', params{% if details['requestBody'] %}, data{% endif %});
  }

  {% endfor %}
  {% endfor %}
}

module.exports = {{ api_info['title']|replace(' ', '') }}Client;

