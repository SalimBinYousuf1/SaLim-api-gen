# Generated by Salim-api-gen
# API: {{ api_info['title'] }} (v{{ api_info['version'] }})
# Description: {{ api_info['description'] }}

import aiohttp
import asyncio
from typing import Dict, Any, Optional, List, Union
from .exceptions import APIError, ValidationError, RateLimitExceeded
from .validation import validate_schema

class {{ api_info['title']|replace(' ', '') }}Client:
    def __init__(self, base_url: str, api_key: Optional[str] = None):
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.session = aiohttp.ClientSession()
        if api_key:
            self.session.headers.update({"Authorization": f"Bearer {api_key}"})

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()

    async def close(self):
        await self.session.close()

    {% for endpoint, details in endpoints.items() %}
    async def {{ details['operationId']|default(endpoint.split(' ')[-1]|lower) }}(
        self,
        {% for param in details['parameters'] %}
        {{ param['name'] }}: {{ parser.infer_type(param['schema']) }},
        {% endfor %}
        {% if details['requestBody'] %}
        data: {{ parser.get_request_body_type(details['requestBody']) }},
        {% endif %}
    ) -> {{ parser.get_response_type(details['responses']) }}:
        """
        {{ details['summary'] }}

        {{ details['description'] }}
        """
        endpoint = "{{ endpoint.split(' ')[-1] }}"
        method = "{{ endpoint.split(' ')[0]|lower }}"
        params = {
            {% for param in details['parameters'] if param['in'] == 'query' %}
            "{{ param['name'] }}": {{ param['name'] }},
            {% endfor %}
        }
        {% if details['requestBody'] %}
        if data:
            validate_schema(data, {{ details['requestBody']['content']['application/json']['schema'] }})
        {% endif %}
        response = await self._request(method, endpoint, params=params{% if details['requestBody'] %}, json=data{% endif %})
        return response

    {% endfor %}

    async def _request(self, method: str, endpoint: str, **kwargs) -> Any:
        url = f"{self.base_url}{endpoint}"
        try:
            async with self.session.request(method, url, **kwargs) as response:
                response.raise_for_status()
                return await response.json()
        except aiohttp.ClientResponseError as e:
            if e.status == 429:
                raise RateLimitExceeded("API rate limit exceeded")
            raise APIError(f"API request failed: {e}")
        except aiohttp.ClientError as e:
            raise APIError(f"Request failed: {e}")

# Synchronous wrapper
class Sync{{ api_info['title']|replace(' ', '') }}Client:
    def __init(self, base_url: str, api_key: Optional[str] = None):
        self.async_client = {{ api_info['title']|replace(' ', '') }}Client(base_url, api_key)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        asyncio.run(self.async_client.close())

    {% for endpoint, details in endpoints.items() %}
    def {{ details['operationId']|default(endpoint.split(' ')[-1]|lower) }}(
        self,
        {% for param in details['parameters'] %}
        {{ param['name'] }}: {{ parser.infer_type(param['schema']) }},
        {% endfor %}
        {% if details['requestBody'] %}
        data: {{ parser.get_request_body_type(details['requestBody']) }},
        {% endif %}
    ) -> {{ parser.get_response_type(details['responses']) }}:
        """
        {{ details['summary'] }}

        {{ details['description'] }}
        """
        return asyncio.run(self.async_client.{{ details['operationId']|default(endpoint.split(' ')[-1]|lower) }}(
            {% for param in details['parameters'] %}
            {{ param['name'] }}={{ param['name'] }},
            {% endfor %}
            {% if details['requestBody'] %}
            data=data,
            {% endif %}
        ))

    {% endfor %}

